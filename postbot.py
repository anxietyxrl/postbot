import os
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, CallbackQueryHandler
)

# –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏)
user_drafts = {}

CHANNEL_ID = "@adpanx"  # –∏–ª–∏ "-1001234567890"

def get_preview_markup():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="delete_draft")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ ‚Äî —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–æ—Å—Ç —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_drafts:
        user_drafts[user_id] = {}

    user_drafts[user_id]['text'] = update.message.text
    await update.message.reply_text(
    f"üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω. –í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç:\n\n{update.message.text}",
    reply_markup=get_preview_markup()
)
    
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo_file_id = update.message.photo[-1].file_id  # –±–µ—Ä—ë–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ

    if user_id not in user_drafts:
        user_drafts[user_id] = {}

    user_drafts[user_id]['photo'] = photo_file_id
    user_drafts[user_id]['caption'] = update.message.caption or user_drafts[user_id].get('text', '')

    await update.message.reply_photo(
        photo=photo_file_id,
        caption=f"üì∏ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:\n\n{user_drafts[user_id]['caption']}",
        reply_markup=get_preview_markup()
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    draft = user_drafts.get(user_id)

    if query.data == "publish":
        if not draft:
            await query.edit_message_text("‚ùó –ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            return
        try:
            if 'photo' in draft:
                await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=draft['photo'],
                    caption=draft.get('caption', '')
                )
            else:
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=draft.get('text', '')
                )
            await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
            user_drafts.pop(user_id, None)
        except Exception as e:
            await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    elif query.data == "edit_text":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        context.user_data['editing'] = True

    elif query.data == "delete_draft":
        user_drafts.pop(user_id, None)
        await query.edit_message_text("üóëÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª—ë–Ω.")

async def handle_editing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if context.user_data.get('editing'):
        if user_id not in user_drafts:
            user_drafts[user_id] = {}
        user_drafts[user_id]['text'] = update.message.text
        user_drafts[user_id]['caption'] = update.message.text
        context.user_data['editing'] = False
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=get_preview_markup())

if __name__ == "__main__":
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_editing))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.add_handler(CallbackQueryHandler(handle_button))

    print("üì® PostBot –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
